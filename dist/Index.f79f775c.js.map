{"mappings":"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","sources":["<anon>","js/src/script.js","js/src/nationalInsurance.js","js/src/config.js","js/src/incomeTax.js"],"sourcesContent":["const $f037308f8d5d76fb$export$5964e2d1202c4c9e = 12570;\nconst $f037308f8d5d76fb$export$ec98ede99d565e5f = 0.1;\nconst $f037308f8d5d76fb$export$500e970a1daca967 = 50270;\nconst $f037308f8d5d76fb$export$3f5cc2de0e466672 = 0.2;\nconst $f037308f8d5d76fb$export$6b443acbbe6db089 = 12570;\nconst $f037308f8d5d76fb$export$840732e986eabc10 = 0.2;\nconst $f037308f8d5d76fb$export$cbee84573cfd6877 = 50271;\nconst $f037308f8d5d76fb$export$21c2b7f3a0e95849 = 0.4;\nconst $f037308f8d5d76fb$export$686da4ba519983b1 = 125141;\nconst $f037308f8d5d76fb$export$9dfbf5e7e79d2694 = 0.45;\nconst $f037308f8d5d76fb$export$27e17c21b45b5828 = 100000;\n\n\nclass $7271747e33ff14ea$export$30456f3f79237c4c {\n    calculateMonthlyNationalInsurance = function(grossAnnualIncome) {\n        if (grossAnnualIncome <= (0, $f037308f8d5d76fb$export$5964e2d1202c4c9e)) return 0;\n        if (grossAnnualIncome <= (0, $f037308f8d5d76fb$export$500e970a1daca967)) return +((grossAnnualIncome - (0, $f037308f8d5d76fb$export$5964e2d1202c4c9e)) * (0, $f037308f8d5d76fb$export$ec98ede99d565e5f) / 12).toFixed(2);\n        return +((((0, $f037308f8d5d76fb$export$500e970a1daca967) - (0, $f037308f8d5d76fb$export$5964e2d1202c4c9e)) * (0, $f037308f8d5d76fb$export$ec98ede99d565e5f) + (grossAnnualIncome - (0, $f037308f8d5d76fb$export$500e970a1daca967)) * (0, $f037308f8d5d76fb$export$3f5cc2de0e466672)) / 12).toFixed(2);\n    };\n}\n\n\n\nclass $e4f1eb3d4786e784$export$4b66b864b7c0a97 {\n    // There are three tax rates:\n    // Basic = 20%\n    // Higher - 40%\n    // Additional = 45%\n    // What type of tax payer is this?\n    #isBasicRate = function(grossAnnualIncome) {\n        return grossAnnualIncome > (0, $f037308f8d5d76fb$export$6b443acbbe6db089) && grossAnnualIncome < (0, $f037308f8d5d76fb$export$cbee84573cfd6877);\n    };\n    #isHigherRate = function(grossAnnualIncome) {\n        return grossAnnualIncome >= (0, $f037308f8d5d76fb$export$cbee84573cfd6877) && grossAnnualIncome < (0, $f037308f8d5d76fb$export$686da4ba519983b1);\n    };\n    #isAdditionalRate = function(grossAnnualIncome) {\n        return grossAnnualIncome >= (0, $f037308f8d5d76fb$export$686da4ba519983b1);\n    };\n    //Tax calculations\n    #calculateAbovePersonalBelowAdditional = function(grossAmount, adjustedAllowance) {\n        return (grossAmount - adjustedAllowance) * (0, $f037308f8d5d76fb$export$840732e986eabc10);\n    };\n    #calculateAboveHigherBelowAdditionalAdjusted = function(grossAnnualIncome) {\n        //Need to add a modification to the lower threshold\n        //When income is over £100K, for every £2 the personal allowance is reduced\n        // by £1\n        let adjustedPersonalAllowance = (0, $f037308f8d5d76fb$export$6b443acbbe6db089);\n        let adjustedHigherRateStart = (0, $f037308f8d5d76fb$export$cbee84573cfd6877);\n        if (grossAnnualIncome > (0, $f037308f8d5d76fb$export$27e17c21b45b5828)) {\n            // Remember for every £2 the personal allowance is reduced by £1\n            const amountOver100KHalved = (grossAnnualIncome - (0, $f037308f8d5d76fb$export$27e17c21b45b5828)) / 2;\n            adjustedPersonalAllowance -= amountOver100KHalved;\n            adjustedHigherRateStart -= amountOver100KHalved;\n        }\n        const lowerRateTax = this.#calculateAbovePersonalBelowAdditional(adjustedHigherRateStart, adjustedPersonalAllowance < 0 ? 0 : adjustedPersonalAllowance);\n        const amountOverHigherRate = grossAnnualIncome - (adjustedHigherRateStart - 1);\n        const higherRateTax = amountOverHigherRate * (0, $f037308f8d5d76fb$export$21c2b7f3a0e95849);\n        return higherRateTax + lowerRateTax;\n    };\n    #calculateAboveAdditionalThreshold = function(grossAnnualIncome) {\n        const amountOverAdditionalThreshold = grossAnnualIncome - ((0, $f037308f8d5d76fb$export$686da4ba519983b1) - 1);\n        const taxUnderAdditionalThreshold = this.#calculateAboveHigherBelowAdditionalAdjusted((0, $f037308f8d5d76fb$export$686da4ba519983b1) - 1);\n        const taxOverAdditionalThreshold = amountOverAdditionalThreshold * (0, $f037308f8d5d76fb$export$9dfbf5e7e79d2694) + taxUnderAdditionalThreshold;\n        return taxOverAdditionalThreshold;\n    };\n    //Main function\n    calculateAnnualIncomeTax = function(grossAnnualIncome) {\n        //Shouldn't pay any tax\n        if (grossAnnualIncome <= (0, $f037308f8d5d76fb$export$6b443acbbe6db089)) return 0;\n        //Above 12571 aand below 50271\n        if (this.#isBasicRate(grossAnnualIncome)) return this.#calculateAbovePersonalBelowAdditional(grossAnnualIncome, (0, $f037308f8d5d76fb$export$6b443acbbe6db089));\n        //Above 150000\n        if (this.#isAdditionalRate(grossAnnualIncome)) return this.#calculateAboveAdditionalThreshold(grossAnnualIncome);\n        //above 50271 and below 150000\n        if (this.#isHigherRate(grossAnnualIncome)) return this.#calculateAboveHigherBelowAdditionalAdjusted(grossAnnualIncome);\n    };\n}\n\n\n// DOM elements\n// Input form\nconst $0d2ff273cc2d008c$var$inputAnnualIncome = document.querySelector(\".input-gross-income\");\nconst $0d2ff273cc2d008c$var$pensionMonthlyContribution = document.querySelector(\".input-pension-contribution\");\nconst $0d2ff273cc2d008c$var$btnCalculate = document.querySelector(\".btn-calculate\");\n// Results container\nconst $0d2ff273cc2d008c$var$resultsContainer = document.querySelector(\".results-container\");\nconst $0d2ff273cc2d008c$var$monthlyGrossIncomeResult = document.querySelector(\".monthly-gross-income-result\");\nconst $0d2ff273cc2d008c$var$monthlyIncomeTaxResult = document.querySelector(\".monthly-income-tax-result\");\nconst $0d2ff273cc2d008c$var$monthlyNIResult = document.querySelector(\".monthly-NI-result\");\nconst $0d2ff273cc2d008c$var$monthlyNetResult = document.querySelector(\".monthly-net-result\");\n// Instances\nconst $0d2ff273cc2d008c$var$nationalInsurance = new (0, $7271747e33ff14ea$export$30456f3f79237c4c)();\nconst $0d2ff273cc2d008c$var$incomeTax = new (0, $e4f1eb3d4786e784$export$4b66b864b7c0a97)();\n// Validations\nconst $0d2ff273cc2d008c$var$inputsArevalid = function() {\n    if (isNaN($0d2ff273cc2d008c$var$inputAnnualIncome.value) && isNaN(parseFloat($0d2ff273cc2d008c$var$inputAnnualIncome))) {\n        alert(\"Please enter a valid Annual Income\");\n        return false;\n    }\n    if (+$0d2ff273cc2d008c$var$inputAnnualIncome.value <= 0) {\n        alert(\"Annual income must be a number greater than 0\");\n        return false;\n    }\n    if (isNaN($0d2ff273cc2d008c$var$pensionMonthlyContribution.value)) {\n        alert(\"Please enter a valid Monthly Pension Contribution\");\n        return false;\n    }\n    if (+$0d2ff273cc2d008c$var$pensionMonthlyContribution.value < 0) {\n        alert(\"Monthly Pension Contribution must not be less than 0\");\n        return false;\n    }\n    return true;\n};\nconst $0d2ff273cc2d008c$var$formatMoney = function(value, locale, currency) {\n    return new Intl.NumberFormat(\"en-GB\", {\n        style: \"currency\",\n        currency: \"GBP\",\n        maximumFractionDigits: 0,\n        minimumFractionDigits: 0\n    }).format(value);\n};\n//Event listening\n$0d2ff273cc2d008c$var$btnCalculate.addEventListener(\"click\", function(event) {\n    event.preventDefault();\n    // 1. Check inputs\n    if (!$0d2ff273cc2d008c$var$inputsArevalid()) return;\n    // 2. Calculate totals\n    const totals = $0d2ff273cc2d008c$var$calculateTotals();\n    // 3. Display results\n    $0d2ff273cc2d008c$var$displayResults(...totals);\n});\nconst $0d2ff273cc2d008c$var$calculateTotals = function() {\n    const annualIncome = +$0d2ff273cc2d008c$var$inputAnnualIncome.value;\n    const monthlyPension = +$0d2ff273cc2d008c$var$pensionMonthlyContribution.value;\n    const grossMonthlyIncome = +(annualIncome / 12);\n    const taxableAnnualIncome = +(annualIncome - monthlyPension * 12);\n    const monthlyNationalInsurance = $0d2ff273cc2d008c$var$calculateMonthlyNationalInsurance(annualIncome);\n    const monthlyIncomeTax = $0d2ff273cc2d008c$var$calculateMonthlyIncomeTax(taxableAnnualIncome);\n    return [\n        grossMonthlyIncome,\n        monthlyNationalInsurance,\n        monthlyIncomeTax,\n        monthlyPension\n    ];\n};\nconst $0d2ff273cc2d008c$var$displayResults = function(grossMonthlyIncome, monthlyNI, monthlyTax, monthlyPension) {\n    $0d2ff273cc2d008c$var$monthlyGrossIncomeResult.textContent = `${$0d2ff273cc2d008c$var$formatMoney(grossMonthlyIncome)}`;\n    $0d2ff273cc2d008c$var$monthlyNIResult.textContent = `${$0d2ff273cc2d008c$var$formatMoney(monthlyNI)}`;\n    $0d2ff273cc2d008c$var$monthlyIncomeTaxResult.textContent = `${$0d2ff273cc2d008c$var$formatMoney(monthlyTax)}`;\n    $0d2ff273cc2d008c$var$monthlyNetResult.textContent = `${$0d2ff273cc2d008c$var$formatMoney(grossMonthlyIncome - monthlyNI - monthlyTax - monthlyPension)}`;\n    $0d2ff273cc2d008c$var$resultsContainer.classList.remove(\"hidden\");\n};\nconst $0d2ff273cc2d008c$var$calculateMonthlyIncomeTax = function(taxableIncome) {\n    return $0d2ff273cc2d008c$var$incomeTax.calculateAnnualIncomeTax(taxableIncome) / 12;\n};\nconst $0d2ff273cc2d008c$var$calculateMonthlyNationalInsurance = function(annualIncome) {\n    return $0d2ff273cc2d008c$var$nationalInsurance.calculateMonthlyNationalInsurance(annualIncome);\n};\n\n\n//# sourceMappingURL=Index.f79f775c.js.map\n","import { NationalInsurance } from './nationalInsurance.js';\r\nimport { IncomeTax } from './incomeTax.js';\r\n\r\n// DOM elements\r\n// Input form\r\nconst inputAnnualIncome = document.querySelector('.input-gross-income');\r\nconst pensionMonthlyContribution = document.querySelector(\r\n  '.input-pension-contribution'\r\n);\r\nconst btnCalculate = document.querySelector('.btn-calculate');\r\n\r\n// Results container\r\nconst resultsContainer = document.querySelector('.results-container');\r\nconst monthlyGrossIncomeResult = document.querySelector(\r\n  '.monthly-gross-income-result'\r\n);\r\nconst monthlyIncomeTaxResult = document.querySelector(\r\n  '.monthly-income-tax-result'\r\n);\r\nconst monthlyNIResult = document.querySelector('.monthly-NI-result');\r\nconst monthlyNetResult = document.querySelector('.monthly-net-result');\r\n\r\n// Instances\r\nconst nationalInsurance = new NationalInsurance();\r\nconst incomeTax = new IncomeTax();\r\n\r\n// Validations\r\nconst inputsArevalid = function () {\r\n  if (isNaN(inputAnnualIncome.value) && isNaN(parseFloat(inputAnnualIncome))) {\r\n    alert('Please enter a valid Annual Income');\r\n    return false;\r\n  }\r\n\r\n  if (+inputAnnualIncome.value <= 0) {\r\n    alert('Annual income must be a number greater than 0');\r\n    return false;\r\n  }\r\n\r\n  if (isNaN(pensionMonthlyContribution.value)) {\r\n    alert('Please enter a valid Monthly Pension Contribution');\r\n    return false;\r\n  }\r\n\r\n  if (+pensionMonthlyContribution.value < 0) {\r\n    alert('Monthly Pension Contribution must not be less than 0');\r\n    return false;\r\n  }\r\n\r\n  return true;\r\n};\r\n\r\nconst formatMoney = function (value, locale, currency) {\r\n  return new Intl.NumberFormat('en-GB', {\r\n    style: 'currency',\r\n    currency: 'GBP',\r\n    maximumFractionDigits: 0,\r\n    minimumFractionDigits: 0,\r\n  }).format(value);\r\n};\r\n\r\n//Event listening\r\nbtnCalculate.addEventListener('click', function (event) {\r\n  event.preventDefault();\r\n\r\n  // 1. Check inputs\r\n  if (!inputsArevalid()) return;\r\n\r\n  // 2. Calculate totals\r\n  const totals = calculateTotals();\r\n\r\n  // 3. Display results\r\n  displayResults(...totals);\r\n});\r\n\r\nconst calculateTotals = function () {\r\n  const annualIncome = +inputAnnualIncome.value;\r\n  const monthlyPension = +pensionMonthlyContribution.value;\r\n\r\n  const grossMonthlyIncome = +(annualIncome / 12);\r\n\r\n  const taxableAnnualIncome = +(annualIncome - monthlyPension * 12);\r\n\r\n  const monthlyNationalInsurance =\r\n    calculateMonthlyNationalInsurance(annualIncome);\r\n\r\n  const monthlyIncomeTax = calculateMonthlyIncomeTax(taxableAnnualIncome);\r\n\r\n  return [\r\n    grossMonthlyIncome,\r\n    monthlyNationalInsurance,\r\n    monthlyIncomeTax,\r\n    monthlyPension,\r\n  ];\r\n};\r\n\r\nconst displayResults = function (\r\n  grossMonthlyIncome,\r\n  monthlyNI,\r\n  monthlyTax,\r\n  monthlyPension\r\n) {\r\n  monthlyGrossIncomeResult.textContent = `${formatMoney(grossMonthlyIncome)}`;\r\n  monthlyNIResult.textContent = `${formatMoney(monthlyNI)}`;\r\n  monthlyIncomeTaxResult.textContent = `${formatMoney(monthlyTax)}`;\r\n  monthlyNetResult.textContent = `${formatMoney(\r\n    grossMonthlyIncome - monthlyNI - monthlyTax - monthlyPension\r\n  )}`;\r\n  resultsContainer.classList.remove('hidden');\r\n};\r\n\r\nconst calculateMonthlyIncomeTax = function (taxableIncome) {\r\n  return incomeTax.calculateAnnualIncomeTax(taxableIncome) / 12;\r\n};\r\n\r\nconst calculateMonthlyNationalInsurance = function (annualIncome) {\r\n  return nationalInsurance.calculateMonthlyNationalInsurance(annualIncome);\r\n};\r\n","import { lowerNIThreshold } from './config.js';\r\nimport { lowerNIRate } from './config.js';\r\nimport { upperNIThreshold } from './config.js';\r\nimport { upperNIRate } from './config.js';\r\n\r\nexport class NationalInsurance {\r\n  calculateMonthlyNationalInsurance = function (grossAnnualIncome) {\r\n    if (grossAnnualIncome <= lowerNIThreshold) {\r\n      return 0;\r\n    }\r\n\r\n    if (grossAnnualIncome <= upperNIThreshold)\r\n      return +(\r\n        ((grossAnnualIncome - lowerNIThreshold) * lowerNIRate) /\r\n        12\r\n      ).toFixed(2);\r\n\r\n    return +(\r\n      ((upperNIThreshold - lowerNIThreshold) * lowerNIRate +\r\n        (grossAnnualIncome - upperNIThreshold) * upperNIRate) /\r\n      12\r\n    ).toFixed(2);\r\n  };\r\n}\r\n","export const lowerNIThreshold = 12570;\r\nexport const lowerNIRate = 0.1;\r\nexport const upperNIThreshold = 50270;\r\nexport const upperNIRate = 0.2;\r\n\r\nexport const personalAllowance = 12570;\r\nexport const basicRate = 0.2;\r\nexport const higherRateThresholdStart = 50271;\r\nexport const higherRate = 0.4;\r\nexport const additionalThresholdStart = 125141;\r\nexport const additionalRate = 0.45;\r\nexport const personalAllowanceAdjustmentThreshold = 100000;\r\n","import { personalAllowance } from './config.js';\r\nimport { basicRate } from './config.js';\r\nimport { higherRateThresholdStart } from './config.js';\r\nimport { higherRate } from './config.js';\r\nimport { additionalThresholdStart } from './config.js';\r\nimport { additionalRate } from './config.js';\r\nimport { personalAllowanceAdjustmentThreshold } from './config.js';\r\n\r\nexport class IncomeTax {\r\n  // There are three tax rates:\r\n  // Basic = 20%\r\n  // Higher - 40%\r\n  // Additional = 45%\r\n\r\n  // What type of tax payer is this?\r\n  #isBasicRate = function (grossAnnualIncome) {\r\n    return (\r\n      grossAnnualIncome > personalAllowance &&\r\n      grossAnnualIncome < higherRateThresholdStart\r\n    );\r\n  };\r\n\r\n  #isHigherRate = function (grossAnnualIncome) {\r\n    return (\r\n      grossAnnualIncome >= higherRateThresholdStart &&\r\n      grossAnnualIncome < additionalThresholdStart\r\n    );\r\n  };\r\n\r\n  #isAdditionalRate = function (grossAnnualIncome) {\r\n    return grossAnnualIncome >= additionalThresholdStart;\r\n  };\r\n\r\n  //Tax calculations\r\n  #calculateAbovePersonalBelowAdditional = function (\r\n    grossAmount,\r\n    adjustedAllowance\r\n  ) {\r\n    return (grossAmount - adjustedAllowance) * basicRate;\r\n  };\r\n\r\n  #calculateAboveHigherBelowAdditionalAdjusted = function (grossAnnualIncome) {\r\n    //Need to add a modification to the lower threshold\r\n    //When income is over £100K, for every £2 the personal allowance is reduced\r\n    // by £1\r\n\r\n    let adjustedPersonalAllowance = personalAllowance;\r\n    let adjustedHigherRateStart = higherRateThresholdStart;\r\n\r\n    if (grossAnnualIncome > personalAllowanceAdjustmentThreshold) {\r\n      // Remember for every £2 the personal allowance is reduced by £1\r\n      const amountOver100KHalved =\r\n        (grossAnnualIncome - personalAllowanceAdjustmentThreshold) / 2;\r\n      adjustedPersonalAllowance -= amountOver100KHalved;\r\n\r\n      adjustedHigherRateStart -= amountOver100KHalved;\r\n    }\r\n\r\n    const lowerRateTax = this.#calculateAbovePersonalBelowAdditional(\r\n      adjustedHigherRateStart,\r\n      adjustedPersonalAllowance < 0 ? 0 : adjustedPersonalAllowance\r\n    );\r\n\r\n    const amountOverHigherRate =\r\n      grossAnnualIncome - (adjustedHigherRateStart - 1);\r\n    const higherRateTax = amountOverHigherRate * higherRate;\r\n\r\n    return higherRateTax + lowerRateTax;\r\n  };\r\n\r\n  #calculateAboveAdditionalThreshold = function (grossAnnualIncome) {\r\n    const amountOverAdditionalThreshold =\r\n      grossAnnualIncome - (additionalThresholdStart - 1);\r\n    const taxUnderAdditionalThreshold =\r\n      this.#calculateAboveHigherBelowAdditionalAdjusted(\r\n        additionalThresholdStart - 1\r\n      );\r\n\r\n    const taxOverAdditionalThreshold =\r\n      amountOverAdditionalThreshold * additionalRate +\r\n      taxUnderAdditionalThreshold;\r\n\r\n    return taxOverAdditionalThreshold;\r\n  };\r\n\r\n  //Main function\r\n  calculateAnnualIncomeTax = function (grossAnnualIncome) {\r\n    //Shouldn't pay any tax\r\n    if (grossAnnualIncome <= personalAllowance) return 0;\r\n\r\n    //Above 12571 aand below 50271\r\n    if (this.#isBasicRate(grossAnnualIncome))\r\n      return this.#calculateAbovePersonalBelowAdditional(\r\n        grossAnnualIncome,\r\n        personalAllowance\r\n      );\r\n\r\n    //Above 150000\r\n    if (this.#isAdditionalRate(grossAnnualIncome)) {\r\n      return this.#calculateAboveAdditionalThreshold(grossAnnualIncome);\r\n    }\r\n\r\n    //above 50271 and below 150000\r\n    if (this.#isHigherRate(grossAnnualIncome)) {\r\n      return this.#calculateAboveHigherBelowAdditionalAdjusted(\r\n        grossAnnualIncome\r\n      );\r\n    }\r\n  };\r\n}\r\n"],"names":["$0d2ff273cc2d008c$var$inputAnnualIncome","document","querySelector","$0d2ff273cc2d008c$var$pensionMonthlyContribution","$0d2ff273cc2d008c$var$btnCalculate","$0d2ff273cc2d008c$var$resultsContainer","$0d2ff273cc2d008c$var$monthlyGrossIncomeResult","$0d2ff273cc2d008c$var$monthlyIncomeTaxResult","$0d2ff273cc2d008c$var$monthlyNIResult","$0d2ff273cc2d008c$var$monthlyNetResult","$0d2ff273cc2d008c$var$nationalInsurance","calculateMonthlyNationalInsurance","grossAnnualIncome","toFixed","$0d2ff273cc2d008c$var$incomeTax","isBasicRate","isHigherRate","isAdditionalRate","calculateAbovePersonalBelowAdditional","grossAmount","adjustedAllowance","calculateAboveHigherBelowAdditionalAdjusted","adjustedPersonalAllowance","adjustedHigherRateStart","amountOver100KHalved","lowerRateTax","higherRateTax","calculateAboveAdditionalThreshold","amountOverAdditionalThreshold","calculateAnnualIncomeTax","$0d2ff273cc2d008c$var$formatMoney","value","locale","currency","Intl","NumberFormat","style","maximumFractionDigits","minimumFractionDigits","format","addEventListener","event","preventDefault","isNaN","parseFloat","alert","$0d2ff273cc2d008c$var$displayResults","$0d2ff273cc2d008c$var$calculateTotals","annualIncome","monthlyPension","$0d2ff273cc2d008c$var$calculateMonthlyNationalInsurance","$0d2ff273cc2d008c$var$calculateMonthlyIncomeTax","grossMonthlyIncome","monthlyNI","monthlyTax","textContent","classList","remove","taxableIncome"],"version":3,"file":"Index.f79f775c.js.map"}